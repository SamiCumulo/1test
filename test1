function setupCliUpdateContract(cli: commander.Command, updateContractAction: string) {
    return (
    cli
    .command(updateContractAction)
    .description(`${updateContractAction} an NFT`)
    .requiredOption("--params <params>", "params file path", (f) => fs.realpathSync(f))
    .requiredOption(
        "--schema <schema>",
        "Contract schema file path",
        (f) => fs.realpathSync(f),
        "../dist/smart-contract/schema.bin",
    )
    .requiredOption("--energy <energy>", "Maximum Contract Execution Energy", (v) => BigInt(v), 6000n)
    .requiredOption("--contract <contract>", "Contract name", "CIS2-NFT")
    .requiredOption("--function <function>", "Contract function name to call", updateContractAction)
    .requiredOption("--index <index>", "Contract Address Index", (v) => BigInt(v))
    .requiredOption("--sub-index <subIndex>", "Contract Address Sub Index", (v) => BigInt(v), 0n)
    // Sender Account Args
    .requiredOption("--sender <sender>", "Sender Account Address. This should be the owner of the Contract")
    .requiredOption("--sign-key <signKey>", "Account Signing Key")
    // Node Client args
    .requiredOption("--auth-token <authToken>", "Concordium Node Auth Token", "rpcadmin")
    .requiredOption("--ip <ip>", "Concordium Node IP", "127.0.0.1")
    .requiredOption("--port <port>", "Concordum Node Port", (v) => parseInt(v), 10001)
    .requiredOption("--timeout <timeout>", "Concordium Node request timeout", (v) => parseInt(v), 15000)
    .action(
        async (args: UpdateContractArgs) =>
        await sendAccountTransaction(
            args,
            args.sender,
            args.signKey,
            // Payload
            {
            parameter: serializeUpdateContractParameters(
                args.contract,
                args.function,
                JSON.parse(readFileSync(args.params).toString()),
                Buffer.from(readFileSync(args.schema)),
                SchemaVersion.V2,
            ),
            amount: new GtuAmount(0n),
            contractAddress: {
                index: BigInt(args.index),
                subindex: BigInt(args.subIndex),
            },
            receiveName: `${args.contract}.${args.function}`,
            maxContractExecutionEnergy: BigInt(args.energy),
            } as UpdateContractPayload,
            // Transaction Type
            AccountTransactionType.UpdateSmartContractInstance,
        ),
    )
);
}
// Mint
setupCliUpdateContract(cli, "mint");
